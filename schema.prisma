// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  AI_LABELER // Fixed typo
  HUMAN_LABELER
  MODEL_TRAINER
}

enum AIModelStatus {
  TRAINING
  ACTIVE
  ARCHIVED
}

enum UserPointsTransactionsRelatedEntityType {
  VIDEOCLIP
  VIDEOCLIPACTION
  AIMODEL
  OTHER
}

enum VideoStatus {
  NEW
  PROCESSING
  COMPLETED
}

model User {
  user_id          Int      @id @default(autoincrement())
  user_name        String   @unique @db.VarChar(50)
  password         String
  email            String   @unique @db.VarChar(100)
  role_type        UserRole
  create_at        DateTime @default(now()) @db.Timestamptz(6)
  current_points   Int      @default(0)
  ethereum_address String   @unique

  videos             Video[]
  videoClips         VideoClip[]
  aiModels           AIModel[]
  transactions       UserPointsTransaction[]
  verificationRounds HumanVerificationRound[]
  VideoClipAction    VideoClipAction[]
  reputationHistory  UserReputationHistory[] // Added relation
}

model Video {
  video_id       Int         @id @default(autoincrement())
  file_name      String      @db.VarChar(255)
  file_path      String      @db.VarChar(500)
  duration       Int
  upload_date    DateTime    @default(now()) @db.Timestamptz(6)
  status         VideoStatus @default(NEW)
  ipfs_cid       String      @db.VarChar(255)
  file_extension String      @db.VarChar(10)

  videoClips VideoClip[]

  User User[]
}

model VideoClip {
  clip_id             Int      @id @default(autoincrement())
  video_id            Int
  start_time          Int
  end_time            Int
  file_path           String   @db.VarChar(500)
  created_by          Int
  created_at          DateTime @default(now()) @db.Timestamptz(6)
  ipfs_cid            String   @db.VarChar(255)
  file_extension      String   @db.VarChar(10)
  points_value        Int      @default(0)
  generating_model_id Int?
  thumbnail           String?  @db.VarChar(255)

  video           Video    @relation(fields: [video_id], references: [video_id])
  creator         User     @relation(fields: [created_by], references: [user_id])
  generatingModel AIModel? @relation(fields: [generating_model_id], references: [model_id])

  videoClipActions VideoClipAction[]
}

model Action {
  action_id   Int      @id @default(autoincrement())
  action_name String   @unique @db.VarChar(100)
  description String?  @db.Text
  created_at  DateTime @default(now()) @db.Timestamptz(6)

  videoClipActions VideoClipAction[]
  userSelections   UserActionSelection[]
  offeredActions   OfferedAction[]
}

model VideoClipAction {
  clip_action_id           Int       @id @default(autoincrement())
  clip_id                  Int
  action_id                Int
  initial_confidence_score Decimal?  @db.Decimal(5, 2)
  initial_labeled_by       Int
  initial_labeled_at       DateTime  @default(now()) @db.Timestamptz(6)
  consensus_action_id      Int?      // Added for betting system
  consensus_calculated_at  DateTime? @db.Timestamptz(6) // Added for betting system

  videoClip        VideoClip @relation(fields: [clip_id], references: [clip_id])
  action           Action    @relation(fields: [action_id], references: [action_id])
  initialLabeledBy User      @relation(fields: [initial_labeled_by], references: [user_id])

  verificationRounds HumanVerificationRound[]
}

model HumanVerificationRound {
  verification_round_id Int       @id @default(autoincrement())
  clip_action_id        Int
  human_labeler_id      Int
  round_start_time      DateTime  @default(now()) @db.Timestamptz(6)
  round_end_time        DateTime?
  dwell_time            Int?
  points_staked         Int       @default(0) // Added for betting system
  points_processed_at   DateTime? @db.Timestamptz(6) // Added for betting system

  clipAction   VideoClipAction @relation(fields: [clip_action_id], references: [clip_action_id])
  humanLabeler User            @relation(fields: [human_labeler_id], references: [user_id])

  verificationLogs    HumanVerificationLog[]
  userSelections      UserActionSelection[]
  offeredActions      OfferedAction[]
  pointsTransactions  UserPointsTransaction[] // Added relation
}

model HumanVerificationLog {
  human_verification_log_id Int      @id @default(autoincrement())
  verification_round_id     Int
  verification_time         DateTime @default(now()) @db.Timestamptz(6)
  confidence_score          Decimal? @db.Decimal(5, 2)
  comments                  String?  @db.Text

  verificationRound HumanVerificationRound @relation(fields: [verification_round_id], references: [verification_round_id])
}

model AIModel {
  model_id       Int           @id @default(autoincrement())
  version        String        @db.VarChar(50)
  trained_date   DateTime?
  trained_by     Int
  status         AIModelStatus @default(TRAINING)
  accuracy_score Decimal?      @db.Decimal(5, 2)
  model_type_id  Int?
  config         Json?

  trainedBy User         @relation(fields: [trained_by], references: [user_id])

  VideoClip VideoClip[]
}

model UserPointsTransaction {
  transaction_id        Int       @id @default(autoincrement())
  user_id              Int
  points_change        Int
  transaction_type     String     // Added for betting: "BET_WIN", "BET_LOSS", "DECAY", "ADMIN_ADJUSTMENT"
  description          String?    @db.VarChar(255)
  verification_round_id Int?
  created_at           DateTime   @default(now()) @db.Timestamptz(6)

  user User @relation(fields: [user_id], references: [user_id])
  verificationRound HumanVerificationRound? @relation(fields: [verification_round_id], references: [verification_round_id])

  @@index([user_id, created_at(sort: Desc)]) // Added index for better query performance
}

model UserActionSelection {
  user_selection_id     Int      @id @default(autoincrement())
  verification_round_id Int
  selected_action_id    Int?
  selection_time        DateTime @default(now()) @db.Timestamptz(6)
  justification         String?  @db.Text

  verificationRound HumanVerificationRound @relation(fields: [verification_round_id], references: [verification_round_id])
  selectedAction    Action?                @relation(fields: [selected_action_id], references: [action_id])
}

model OfferedAction {
  offered_action_id     Int @id @default(autoincrement())
  verification_round_id Int
  action_id             Int

  verificationRound HumanVerificationRound @relation(fields: [verification_round_id], references: [verification_round_id])
  action            Action                 @relation(fields: [action_id], references: [action_id])

  @@unique([verification_round_id, action_id])
}

model UserReputationHistory {
  reputation_id          Int      @id @default(autoincrement())
  user_id               Int
  reputation_score      Decimal   @db.Decimal(5, 2)
  calculation_timestamp DateTime  @default(now()) @db.Timestamptz(6)
  reason                String?

  // Diagnostic components
  accuracy_component    Decimal?  @db.Decimal(5, 2)
  recency_component    Decimal?  @db.Decimal(5, 2)
  consistency_component Decimal?  @db.Decimal(5, 2)

  user User @relation(fields: [user_id], references: [user_id])

  @@index([user_id, calculation_timestamp(sort: Desc)])
}
